{"version":3,"sources":["firebase_config.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","then","res","userDetails","user","users_ref","collection","console","log","where","uid","get","querySnapshot","empty","add","photoURL","userName","displayName","mailId","email","createdAt","FieldValue","serverTimestamp","SignOut","currentUser","signOut","UsersPortal","props","users_query","orderBy","useCollectionData","idField","users","process","Form","Control","as","onChange","e","selectPerson","target","value","undefined","map","id","ChatRoom","query","message_ref","person","messages","useState","formValue","setFormValue","dummy","useRef","sendMessage","a","preventDefault","text","sender","receiver","convo","current","scrollIntoView","behavior","msg","ChatMessage","message","ref","onSubmit","type","messageClass","src","alt","App","useAuthState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a21f3a52.chunk.js","sourcesContent":["import firebase from 'firebase/app';\n\nconst config = {\n    apiKey: \"AIzaSyDgFG6npILcyixEjb-MUjuf5tBrw2dUTzg\",\n    authDomain: \"react-firebase-chat-a7221.firebaseapp.com\",\n    projectId: \"react-firebase-chat-a7221\",\n    storageBucket: \"react-firebase-chat-a7221.appspot.com\",\n    messagingSenderId: \"356316568421\",\n    appId: \"1:356316568421:web:d41e35bf3ff96b8cdcdf8c\",\n    measurementId: \"G-M860FG15VC\"\n}\n\n!firebase.apps.length ? firebase.initializeApp(config) : firebase.app();\n\nexport default firebase","import {useState, useRef} from \"react\";\nimport './App.css';\nimport firebase from './firebase_config';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\nimport {Form} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n    const [user] = useAuthState(auth)\n\n    const [person, selectPerson] = useState('')\n\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>ðŸ’¬</h1>\n                <SignOut/>\n            </header>\n            <section>\n                {user ? person === '' ? <UsersPortal selectPerson={selectPerson}/> : <ChatRoom person={person} selectPerson={selectPerson}/> :\n                    <SignIn/>}\n            </section>\n        </div>\n    );\n}\n\n\nfunction SignIn() {\n    const signInWithGoogleProvider = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider).then(res => {\n            let userDetails = res.user;\n            let users_ref = firestore.collection(\"users\")\n            console.log(userDetails)\n            users_ref.where(\"uid\", \"==\", userDetails.uid).get()\n                .then(function (querySnapshot) {\n                    if (!querySnapshot.empty) {\n                        console.log(\"Existed user\");\n                    } else {\n                        console.log(\"New User\");\n                        users_ref.add({\n                            uid: userDetails.uid,\n                            photoURL: userDetails.photoURL,\n                            userName: userDetails.displayName,\n                            mailId: userDetails.email,\n                            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n                        }).then(() => console.log(\"user added\"))\n                    }\n                });\n        });\n    }\n    return (\n        <button className=\"sign-in\" onClick={signInWithGoogleProvider}>Sign in</button>\n    )\n}\n\nfunction SignOut() {\n    return auth.currentUser && (\n        <button onClick={() => auth.signOut()}>sign out</button>\n    )\n}\n\nfunction UsersPortal(props) {\n\n    const users_query = firestore.collection(\"users\").orderBy(\"createdAt\")\n    const [users] = useCollectionData(users_query, {idField: 'id'});\n    console.log(process.env.REACT_APP_API_KEY)\n    const selectUser = (e) => {\n        props.selectPerson(e.target.value)\n    }\n    return (\n        <>\n            <Form.Control\n                as=\"select\"\n                className=\"select-user\"\n                onChange={selectUser}\n            >\n                <option value=''>Please Select User</option>\n                {users !== undefined && users.map(user => {\n                    if (user.uid === auth.currentUser.uid) return ''\n                    return <option key={user.id} value={user.uid}>{user.userName}</option>\n                })\n                }\n            </Form.Control>\n        </>\n    )\n}\n\nfunction ChatRoom(props) {\n    const message_ref = firestore.collection(\"chat_messages\")\n    let query = {}\n    query = message_ref.where(\"convo\", \"in\", [auth.currentUser.uid + props.person, props.person + auth.currentUser.uid])\n        .orderBy(\"createdAt\")\n\n    const [messages] = useCollectionData(query, {idField: 'id'});\n    const [formValue, setFormValue] = useState('')\n\n    const dummy = useRef()\n    const sendMessage = async (e) => {\n        e.preventDefault()\n        const {uid, photoURL} = auth.currentUser;\n        if (formValue === '') return;\n        await message_ref.add({\n            text: formValue,\n            uid,\n            sender: uid,\n            receiver: props.person,\n            photoURL,\n            convo: uid + props.person,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\n        })\n\n        setFormValue('');\n\n        dummy.current.scrollIntoView({behavior: 'smooth'})\n    }\n\n    const onSelectBack = () => {\n        props.selectPerson('')\n    }\n\n    return (\n        <>\n            <main>\n                {messages !== undefined && messages.map(msg =>\n                    <ChatMessage key={msg.id} message={msg}/>)\n                }\n                <div ref={dummy}/>\n            </main>\n            <form onSubmit={sendMessage} className=\"form\">\n                <button onClick={onSelectBack}><i className=\"material-icons\">arrow_back</i></button>\n                <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n                <button type=\"submit\"><i className=\"material-icons\">send</i></button>\n            </form>\n        </>\n    )\n}\n\nfunction ChatMessage(props) {\n    const {text, uid, photoURL} = props.message\n\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received'\n\n\n    return (\n        <div className={`message ${messageClass}`}>\n            <img src={photoURL} alt=\"user-pic\"/>\n            <div>{text}</div>\n        </div>\n    )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}